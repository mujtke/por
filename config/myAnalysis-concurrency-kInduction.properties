# analysis.name = myAnalysis-concurrency-kInduction
# analysis.programNames = ./test.c
# analysis.summaryEdges = true
# analysis.useParallelAnalyses = true
# cpa.callstack.skipRecursion = true
# cpa.invariants.abstractionStateFactory = ENTERING_EDGES
# cpa.invariants.interestingVariableLimit = 0
# cpa.invariants.maximumFormulaDepth = 1
# limits.time.cpu = 900s
# log.level = INFO
# # parallelAlgorithm.configFiles = ./components/kInduction/kInduction.properties, ./components/invariantGeneration-no-out.properties::supply-reached-refinable
# parallelAlgorithm.configFiles = ./components/kInduction/kInduction.properties
# specification = specification/default.spc


# ============================================


// ----------------------------------------------------------------------------
// Perform bit-accurate k-induction in combination with a continuously-refined
// invariant generator using a data-flow analysis over an interval-based
// abstract domain. This technique is also known as
// (continuously-refined) ki<-df (or, formerly, ki<-ai).
// ----------------------------------------------------------------------------

# analysis.useParallelAnalyses=true
# parallelAlgorithm.configFiles = ../kInduction/kInduction.properties, ../invariantGeneration-no-out.properties::supply-reached-refinable


// ----------------------------------------------------------------------
// This configuration file enables Bounded Model Checking
// and uses induction for proving safety.
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// This configuration file enables Bounded Model Checking.
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// This configuration file enables Bounded Model Checking.
// ----------------------------------------------------------------------

// the loop unrolling bound
# cpa.loopbound.maxLoopIterations = 1

// disable bounding assertions (default is enabled)
//bmc.boundingAssertions = false

// The rest of the options should not be changed.

// best traversal order for formula creation
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true
analysis.traversal.useReverseLoopstack = true
analysis.traversal.useReverseLoopIterationCount = true

analysis.algorithm.BMC = true

// ARGCPA is needed in order to create an error path for unsafe programs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

# CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopbound.LoopBoundCPA, cpa.value.ValueAnalysisCPA

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No abstractions
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// Do not dump stuff that is not meaningful when using BMC.
cpa.predicate.predmap.export = false
cpa.predicate.invariants.export = false
cpa.predicate.invariants.exportAsPrecision = false

// Ignore target states during formula creation
cpa.automaton.breakOnTargetState = 0

// Use merge^{JOIN} for value analysis alongside predicate to prevent unnecessary unrolling
cpa.value.merge = JOIN



CompositeCPA.cpas = cpa.threading.ThreadingCPA, cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopbound.LoopBoundCPA, cpa.value.ValueAnalysisCPA, cpa.pointer2.PointerCPA, cpa.input.InputCPA

// enable induction for safety verification
bmc.induction = true

// do not use an additional, k-induction-based invariant generator to provide auxiliary invariants;
// just use the simple reached-set-based invariant generator
bmc.invariantGenerationStrategy = REACHED_SET

// activate iterative deepening (0 is infinite deepening)
cpa.loopbound.maxLoopIterationsUpperBound = 0

// start iterative deepening with an initial bound of 1
cpa.loopbound.maxLoopIterations = 1

// increment the bound by one in every iteration of deepening
cpa.loopbound.maxLoopIterationAdjusterFactory = INCREMENT

# Usually, it makes no sense to let k-induction export proof witnesses;
# instead the proof witnesses should be obtained from the invariant generator.
cpa.arg.proofWitness =

cpa.threading.useLocalAccessLocks 				= true
cpa.threading.allowMultipleLHS					= false
cfa.useCFACloningForMultiThreadedPrograms		= true
cpa.callstack.unsupportedFunctions				= platform_device_alloc, platform_device_add, misc_register, pthread_key_create, my_callback


cpa.invariants.maximumFormulaDepth = 1
cpa.invariants.interestingVariableLimit = 0
cpa.invariants.abstractionStateFactory = ENTERING_EDGES


// this automaton defines which locations are the error locations
specification = specification/default.spc

#include includes/resource-limits.properties

