# ----------------------------------------------------------------------
# This configuration file uses a sequential combination
# of three different analyses, namely a value analysis,
# a bounded model checking analysis with k-induction,
# and a predicate analysis, in a total of six different
# configurations.
# This configuration file also specifies the configuration
# to be used for reachability properties on recursive
# programs and for properties regarding memory safety.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'17
specification = ./specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = violation-witness.graphml
cpa.arg.proofWitness = correctness-witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false

# Disable all output except the error path.
output.disable = false

# Disable statistics for memory consumption.
# statistics.memory = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# CFA branch swapping is bad for witnesses
cfa.allowBranchSwapping = false

# Do not export constant values for pointers
# if an external tool is supposed to check the witness:
# the concrete value we use might not make sense in a real setting
counterexample.export.assumptions.includeConstantsForPointers = false

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# if we find a concurrent program, we copy the CFA to avoid colliding functionnames.
cfa.useCFACloningForMultiThreadedPrograms=true

# The analyses used for (non-recursive) reachability properties.
restartAlgorithm.configFiles = myAnalysis-concurrency-bdd-restart.properties, myAnalysis-concurrency-cegar-cintp-restart.properties::if-failed

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# limits.time.cpu::required = 900
limits.time.cpu = 900s
