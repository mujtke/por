# #########################################################################
# My configuration for concurrent program verification.
# This configuration uses BDD-analysis | Pred-Abstraction.
# #########################################################################



cpa 					= cpa.arg.ARGCPA
ARGCPA.cpa              = cpa.composite.CompositeCPA
CompositeCPA.cpas       = cpa.bdd.BDDCPA, cpa.threadingintp.ThreadingIntpCPA
# CompositeCPA.cpas       = cpa.bdd.BDDCPA, cpa.threadingintp.ThreadingIntpCPA

analysis.traversal.order               	= dfs
analysis.traversal.useReversePostorder 	= false
analysis.traversal.useCallstack        	= true
analysis.traversal.useNumberOfThreads  	= true
analysis.mainFunctionNameRegex = svp_simple_\d+_\d+_main



cpa.bdd.merge 									= sep
cpa.callstack.unsupportedFunctions				= pthread_key_create, pthread_getspecific, pthread_setspecific, strcpy, platform_device_alloc, platform_device_add
cpa.composite.aggregateBasicBlocks  			= false
cpa.threadingintp.useLocalAccessLocks 			= false
cpa.threadingintp.allowMultipleLHS				= true
cfa.useCFACloningForMultiThreadedPrograms		= true


# For interrupt
cpa.threadingintp.enableInterruptNesting = false
cpa.threadingintp.simulateInterruption = true
cpa.threadingintp.intpPriOrder = BH
cpa.threadingintp.maxInterruptLevel = 3
cpa.threadingintp.maxLevelInterruptNesting = 2
cpa.threadingintp.priorityFileFolder = ../benchmark-racebench/2.1_remarks/
cpa.threadingintp.priorityFileExtSuffix = _priority.txt
cpa.threadingintp.priorityRegex = ^([a-zA-Z_]+[a-zA-Z0-9_]*)/\d+/(\d+)
cpa.threadingintp.maxInterruptTimesForEachFunc = 1
cpa.threadingintp.enableRepPointSelecting = true

# For PC-DPOR
utils.edgeinfo.buildDepGraph  = true
depgraph.cond.buildClonedFunc = true
depgraph.cond.useCondDep = false
depgraph.cond.removeIsolatedNodes = false
depgraph.cond.export = false
depgraph.cond.useSolverToCompute = true
depgraph.cond.exportDot = CondDependenceGraph.dot
# cpa.por.pcdpor.depComputationStateType = BDD

solver.solver = SMTINTERPOL
cpa.predicate.encodeBitvectorAs = INTEGER
cpa.predicate.encodeFloatAs = RATIONAL


# cpa.locations.useIncClonedFunc			= false
# cpa.threadingintp.useIncClonedFunc 			= false
depgraph.cond.buildForNoneCloneThread	= true
# cfa.cfaCloner.numberOfCopies			= 5



output.disable 					= false
cpa.arg.export					= true
cfa.export						= true
cfa.exportPerFunction			= true
cfa.callgraph.export			= false
report.export					= true
# assumptions.export				= false
counterexample.export.enabled	= true
statistics.export 				= true
cpa.automaton.dotExport = true


cpa.arg.proofWitness			= proof.graphml
cpa.arg.proofWitness.dot		= proof.dot


# specification 	= ./specification/default.spc
specification 	= ./specification/sv-comp-reachability.spc
limits.time.cpu	= 900s