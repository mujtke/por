# --------------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA 
# for predicate analysis with CEGAR.
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for abstractions at loop heads with function inlining.
# Abstractions are stored as formulas and the refinement process is the 
# from the tool Impact from McMillan. 
# 
# Overall structure:
# 	CEGAR + Pred Abstraction.
# --------------------------------------------------------------------------


#include includes/predicateAnalysis-PredAbsRefiner.properties

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa 				= cpa.arg.ARGCPA
ARGCPA.cpa 			= cpa.composite.CompositeCPA
CompositeCPA.cpas 	= cpa.threading.ThreadingCPA, cpa.predicate.PredicateCPA, cpa.locations.LocationsCPA, cpa.pointer2.PointerCPA, cpa.functionpointer.FunctionPointerCPA


analysis.algorithm.CEGAR 				= true
analysis.traversal.order 				= dfs
analysis.traversal.useReversePostorder 	= false
analysis.traversal.useCallstack 		= true
analysis.traversal.useNumberOfThreads  	= true


# for concurrency programs.
cpa.threading.maxNumberOfThreads 			= 5
cpa.threading.useClonedFunctions 			= true
cpa.threading.useLocalAccessLocks 			= false
cpa.threading.allowMultipleLHS 				= true
cpa.callstack.unsupportedFunctions			= pthread_key_create, pthread_getspecific, pthread_setspecific, strcpy, platform_device_alloc, platform_device_add, misc_register, my_callback
cfa.useCFACloningForMultiThreadedPrograms	= true



# cpa.arg.keepCoveredStatesInReached 		= false
cpa.composite.aggregateBasicBlocks 		= false
# cpa.predicate.blk.alwaysAtFunctions 	= false
# cpa.predicate.blk.alwaysAtBranch		= true
# cpa.predicate.blk.alwaysAtLoops     	= true
# cpa.predicate.blk.useCache 				= false
cpa.predicate.abstraction.computation 	= CARTESIAN
# cpa.predicate.abstraction.type 			= FORMULA
# cpa.predicate.abs.useCache 				= false
cpa.callstack.skipRecursion 			= true
cpa.predicate.precision.sharing			= GLOBAL
cpa.locations.allowMultipleLHS 			= true
cpa.predicate.refinement.performInitialStaticRefinement = false
# cpa.predicate.refinement.restartAfterRefinements        = 1
cpa.predicate.blk.threshold = 1

# for solver.
# enum: [MATHSAT5, SMTINTERPOL, Z3, PRINCESS]
cpa.predicate.encodeBitvectorAs 					= INTEGER
cpa.predicate.encodeFloatAs 						= RATIONAL
solver.solver 										= SMTINTERPOL
# solver.solver 										= MATHSAT5
# solver.interpolationSolver 							= SMTINTERPOL
# solver.solver 										= MATHSAT5
counterexample.export.allowImpreciseCounterexamples	= true


# for outputs.
output.disable 					= false
cpa.arg.export					= true
cpa.arg.proofWitness			= proof.graphml
cpa.arg.proofWitness.dot		= proof.dot
cpa.predicate.predmap.export	= false
cpa.predicate.invariants.export = false
cfa.export						= false
cfa.exportPerFunction			= false
cfa.callgraph.export			= false
report.export					= false
# assumptions.export				= false
counterexample.export.enabled	= false
statistics.export 				= true


specification 	= ./specification/sv-comp-reachability.spc
limits.time.cpu	= 900s