# #############################################################################
# My configuration for concurrent program verification (BBPR algorithm).
# This configuration uses BDD-analysis, Block inference Peephole partial-order 
# reduction, and Path reduction.
# #############################################################################



cpa 					= cpa.bbpr.BBPRCPA
BBPRCPA.cpa				= cpa.arg.ARGCPA
ARGCPA.cpa              = cpa.composite.CompositeCPA
CompositeCPA.cpas       = cpa.threading.ThreadingCPA, cpa.bdd.BDDCPA
# CompositeCPA.cpas       = cpa.threading.ThreadingCPA, cpa.bdd.BDDCPA, cpa.por.bippor.BIPPORCPA

# analysis.algorithm.bbpr 				= true
analysis.traversal.order               	= dfs
analysis.traversal.useReversePostorder 	= false
analysis.traversal.useCallstack        	= true
analysis.traversal.useNumberOfThreads  	= true


cpa.bdd.merge 									= sep
# cpa.callstack.unsupportedFunctions				= {}
cpa.callstack.unsupportedFunctions				= pthread_key_create, pthread_getspecific, pthread_setspecific, strcpy, platform_device_alloc, platform_device_add, misc_register
cpa.composite.aggregateBasicBlocks  			= false
cpa.threading.useLocalAccessLocks 				= false
cpa.threading.allowMultipleLHS					= false
cfa.useCFACloningForMultiThreadedPrograms		= true


# counterexample.export.exportAsSource	= false
# counterexample.export.exportWitness		= true
utils.edgeinfo.buildDepGraph  = false
depgraph.cond.buildClonedFunc = true
depgraph.cond.addNodeForGVars = true

output.disable 					= false
cpa.arg.export					= true
cfa.export						= true
cfa.exportPerFunction			= true
cfa.callgraph.export			= false
report.export					= false
# assumptions.export				= false
counterexample.export.enabled	= false
statistics.export 				= true


cpa.arg.proofWitness			= proof.graphml
cpa.arg.proofWitness.dot		= proof.dot


# specification 	= ./specification/default.spc
specification 	= ./specification/sv-comp-reachability.spc
limits.time.cpu	= 900s
